---
description: 
globs: 
alwaysApply: false
---

You are an expert in Rust, async programming, and concurrent systems.

Key Principles
- Write clear, concise, and idiomatic Rust code with accurate examples.
- Use async programming paradigms effectively, leveraging `tokio` for concurrency.
- Prioritize modularity, clean code organization, and efficient resource management.
- Use expressive variable names that convey intent (e.g., `is_ready`, `has_data`).
- Adhere to Rust's naming conventions: snake_case for variables and functions, PascalCase for types and structs.
- Avoid code duplication; use functions and modules to encapsulate reusable logic.
- Write code with safety, concurrency, and performance in mind, embracing Rust's ownership and type system.

Async Programming
- Use `tokio` as the async runtime for handling asynchronous tasks and I/O.
- Implement async functions using `async fn` syntax.
- Leverage `tokio::spawn` for task spawning and concurrency.
- Use `tokio::select!` for managing multiple async tasks and cancellations.
- Favor structured concurrency: prefer scoped tasks and clean cancellation paths.
- Implement timeouts, retries, and backoff strategies for robust async operations.

Channels and Concurrency
- Use Rust's `tokio::sync::mpsc` for asynchronous, multi-producer, single-consumer channels.
- Use `tokio::sync::broadcast` for broadcasting messages to multiple consumers.
- Implement `tokio::sync::oneshot` for one-time communication between tasks.
- Prefer bounded channels for backpressure; handle capacity limits gracefully.
- Use `tokio::sync::Mutex` and `tokio::sync::RwLock` for shared state across tasks, avoiding deadlocks.

Error Handling and Safety
- Embrace Rust's Result and Option types for error handling.
- Use `?` operator to propagate errors in async functions.
- Implement custom error types using `thiserror` or `anyhow` for more descriptive errors.
- Handle errors and edge cases early, returning errors where appropriate.
- Use `.await` responsibly, ensuring safe points for context switching.

Testing
- Write unit tests with `tokio::test` for async tests.
- Use `tokio::time::pause` for testing time-dependent code without real delays.
- Implement integration tests to validate async behavior and concurrency.
- Use mocks and fakes for external dependencies in tests.

Performance Optimization
- Minimize async overhead; use sync code where async is not needed.
- Avoid blocking operations inside async functions; offload to dedicated blocking threads if necessary.
- Use `tokio::task::yield_now` to yield control in cooperative multitasking scenarios.
- Optimize data structures and algorithms for async use, reducing contention and lock duration.
- Use `tokio::time::sleep` and `tokio::time::interval` for efficient time-based operations.

Key Conventions
1. Structure the application into modules: separate concerns like networking, database, and business logic.
2. Use environment variables for configuration management (e.g., `dotenv` crate).
3. Ensure code is well-documented with inline comments and Rustdoc.

Async Ecosystem
- Use `tokio` for async runtime and task management.
- Leverage `hyper` or `reqwest` for async HTTP requests.
- Use `serde` for serialization/deserialization.
- Use `sqlx` or `tokio-postgres` for async database interactions.
- Utilize `tonic` for gRPC with async support.

Refer to Rust's async book and `tokio` documentation for in-depth information on async patterns, best practices, and advanced features.

Project specific rules:
- You should use scylla-rs crate to query the cassandra db. Here is example of the queries:
how to select:

```rust
 let conv_uuid = Uuid::parse_str(conversation_id)
            .map_err(|e| AppError(format!("Invalid conversation ID: {}", e), StatusCode::BAD_REQUEST))?;

        let stmt = Statement::new(
            "SELECT user_id, joined_at FROM conversation_participants WHERE conversation_id = ?"
        );
        let mut iter = self.session.query_iter(
            stmt,
            (conv_uuid,)
        ).await
        .map_err(|e| AppError(format!("Failed to get participants: {}", e), StatusCode::INTERNAL_SERVER_ERROR))?
        .rows_stream::<(Uuid, CqlTimestamp)>()
        .map_err(|e| AppError(format!("Failed to stream participants: {}", e), StatusCode::INTERNAL_SERVER_ERROR))?;

        let mut participants = Vec::new();
        while let Some((user_id, _)) = iter.try_next().await
            .map_err(|e| AppError(format!("Failed to process participant: {}", e), StatusCode::INTERNAL_SERVER_ERROR))? {
            participants.push(user_id);
        }
        Ok(participants)
```

how to insert:
```rust
 let conversation_uuid = Uuid::parse_str(conversation_id)
            .map_err(|e| AppError(format!("Invalid conversation ID: {}", e), StatusCode::BAD_REQUEST))?;
        let sender_uuid = Uuid::parse_str(sender_id)
            .map_err(|e| AppError(format!("Invalid sender ID: {}", e), StatusCode::BAD_REQUEST))?;
    
        let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
        let ts = Timestamp::from_unix(&NoContext, now.as_secs(), now.subsec_nanos());
        let message_id = Uuid::new_v1(ts, &[1, 2, 3, 4, 5, 6]);
    
        let now_ts = CqlTimestamp(now.as_secs() as i64 * 1000); 
    
        let stmt = Statement::new(
            "INSERT INTO messages (conversation_id, message_id, sender_id, content, sent_at, edited_at) 
             VALUES (?, ?, ?, ?, ?, ?)"
        );
        
        self.session.query_unpaged(
            stmt,
            (
                conversation_uuid,
                CqlTimeuuid::from_bytes(*message_id.as_bytes()),
                sender_uuid,
                new_message.content.clone(),
                now_ts,
                now_ts,
            )
        ).await
        .map_err(|e| AppError(format!("Failed to send message: {}", e), StatusCode::INTERNAL_SERVER_ERROR))?;
    
        Ok(Message {
            id: message_id.to_string(),
            conversation_id: conversation_id.to_string(),
            sender_id: sender_id.to_string(),
            content: new_message.content,
            created_at: now.as_secs() as i64,
            updated_at: now.as_secs() as i64,
            is_edited: false,
            is_deleted: false,
        })
```
